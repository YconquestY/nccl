
collectives\.cc: {
    ncclSend/Recv: {tooltip: Blocking for GPU}
    ncclSend/Recv: {
        link: https://docs.nvidia.com/deeplearning/nccl/user-guide/docs/api/p2p.html
    }
    ncclSend/Recv.style.stroke: green
    ncclSend/Recv.style.fill: palegreen
}
collectives\.cc.ncclSend/Recv -> include.collectives\.h.ncclTypeSize: 1 {
    style: {
        stroke: gray
    }
}
collectives\.cc.ncclSend/Recv -> group\.cc.ncclGroupStart: 2
collectives\.cc.ncclSend/Recv -> group\.cc.ncclGroupEnd: 4
collectives\.cc.ncclSend/Recv -> enqueue\.cc.ncclEnqueueCheck: 3

# include/
include: {
    near: bottom-center

    utils\.h: {
        ncclInstruQueueEmpty
        ncclInstruQueueHead
        ncclInstruQueueDequeue
        ncclInstruQueueEnqueue
        ncclMemoryStackAlloc
        ncclMemoryStackPush -> ncclMemoryStack\:\:allocate
    }
    collectives\.h: {
        ncclTypeSize.style.stroke: gray
        ncclTypeSize.style.fill: gainsboro
    }
    collectives\.h.style.stroke: gray
    collectives\.h.style.fill: gainsboro

    group\.h: {
        ncclGroupCommLeave
        ncclGroupCommJoin

        ncclGroupErrorCheck.style.stroke: gray
        ncclGroupErrorCheck.style.fill: gainsboro

        ncclGroupStartInternal: {tooltip: Increment per-thread `ncclGroupMode`}

        ncclGroupCommPreconnect: {tooltip: Mark channels for pre-connection by inserting its communicator to head of linked list}
    }
    channel\.h: {
        ncclP2pChannelBaseForRound: {tooltip: Compute P2P channel index. In the case of 1 node, simply cap channel number at 256.}
    }
    device\.h: {
        ncclP2pChannelForPart: {tooltip: Distribute P2P channels to maximize B/W}
    }
    bitops\.h: {
        reverseBits: {tooltip: Reverse the least significant n bits and reset the remaining top bits}
        reverseSubBits.style.stroke: gray
        reverseSubBits.style.fill: gainsboro

        countOneBits
    }
    strongstream\.h: {
        ncclCudaGraphSame
    }
}
include.group\.h.ncclGroupCommJoin -> include.utils\.h.ncclMemoryStackPush
include.utils\.h.ncclMemoryStack\:\:allocate -> misc.utils\.cc.ncclMemoryStack\:\:allocateSpilled
include.device\.h.ncclP2pChannelForPart -> include.bitops\.h.reverseBits: 2
include.bitops\.h.reverseBits -> include.bitops\.h.reverseSubBits
include.device\.h.ncclP2pChannelForPart -> include.bitops\.h.countOneBits: 1

group\.cc: {
    ncclGroupStart

    groupCleanup.style.stroke: gray
    groupCleanup.style.fill: gainsboro
    ncclGroupEndInternal -> groupCleanup: fail {
        style: {
            stroke: gray
            stroke-dash: 6
        }
    }
    ncclGroupEnd -> ncclGroupEndInternal
    ncclGroupEndInternal -> groupAsyncJobMain: 4 {
        style: {
            stroke-dash: 6
        }
    }
    ncclGroupEndInternal -> groupLaunch: 2*
    ncclGroupEndInternal -> groupResetJobState: 3*

    groupAsyncJobMain -> groupLaunchNonBlocking
    groupLaunchNonBlocking -> groupLaunch
    groupLaunch -> groupCleanup: fail {
        style: {
            stroke: gray
            stroke-dash: 6
        }
    }
    groupLaunch -> asyncJobLaunch: 2
    groupLaunch -> doLaunches: n
    
    asyncJobLaunch -> ncclAsyncJobMain: 3
    ncclAsyncJobMain -> ncclP2PPreconnectFunc: {
        style: {
            stroke-dash: 6
        }
    }
    ncclP2PPreconnectFunc.style.stroke: red
    ncclP2PPreconnectFunc.style.fill: mistyrose
}
group\.cc.ncclGroupEndInternal -> include.utils\.h.ncclInstruQueueEmpty: 1
group\.cc.ncclGroupEndInternal -> include.utils\.h.ncclInstruQueueHead: 2
group\.cc.ncclGroupEndInternal -> init\.cc.ncclCommSetAsyncError: 3
group\.cc.groupLaunch -> init\.cc.ncclCommSetAsyncError: n + 2
group\.cc.asyncJobLaunch -> init\.cc.ncclCommSetAsyncError: 5
group\.cc.ncclGroupStart -> include.group\.h.ncclGroupStartInternal

group\.cc.groupLaunch -> include.utils\.h.ncclInstruQueueEnqueue: 1
group\.cc.groupLaunch -> include.group\.h.ncclGroupCommLeave: n + 1

group\.cc.asyncJobLaunch -> include.utils\.h.ncclInstruQueueEmpty: 1
group\.cc.asyncJobLaunch -> include.utils\.h.ncclInstruQueueHead: 2
group\.cc.asyncJobLaunch -> include.utils\.h.ncclInstruQueueDequeue: 4

enqueue\.cc: {
    ncclEnqueueCheck -> taskAppend: 5
}
enqueue\.cc.ncclEnqueueCheck -> include.group\.h.ncclGroupStartInternal: 1
enqueue\.cc.ncclEnqueueCheck -> misc.argcheck\.cc.CommCheck: 2 {
    style: {
        stroke: gray
    }
}
enqueue\.cc.ncclEnqueueCheck -> init\.cc.ncclCommEnsureReady: 3
enqueue\.cc.ncclEnqueueCheck -> misc.argcheck\.cc.ArgsCheck: 4 {
    style: {
        stroke: gray
    }
}
enqueue\.cc.ncclEnqueueCheck -> include.group\.h.ncclGroupErrorCheck: 6 {
    style: {
        stroke: gray
    }
}
enqueue\.cc.ncclEnqueueCheck -> group\.cc.ncclGroupEndInternal: 7
enqueue\.cc.ncclEnqueueCheck -> init\.cc.ncclCommGetAsyncError: 8

enqueue\.cc.taskAppend -> include.group\.h.ncclGroupCommJoin: 2
enqueue\.cc.taskAppend -> include.utils\.h.ncclMemoryStackAlloc: 3
enqueue\.cc.taskAppend -> include.utils\.h.ncclInstruQueueEnqueue: 4
enqueue\.cc.taskAppend -> include.collectives\.h.ncclTypeSize: 1
enqueue\.cc.taskAppend -> include.channel\.h.ncclP2pChannelBaseForRound: 5
enqueue\.cc.taskAppend -> include.device\.h.ncclP2pChannelForPart: 6
enqueue\.cc.taskAppend -> include.group\.h.ncclGroupCommPreconnect: 7
enqueue\.cc.taskAppend -> misc.strongstream\.cc.ncclCudaGetCapturingGraph: 8
enqueue\.cc.taskAppend -> include.strongstream\.h.ncclCudaGraphSame: 9

init\.cc: {
    ncclCommSetAsyncError
    ncclCommGetAsyncError: {
        link: 'https://docs.nvidia.com/deeplearning/nccl/user-guide/docs/api/comms.html#ncclcommgetasyncerror'
    }
    ncclCommGetAsyncError.style.stroke: green
    ncclCommGetAsyncError.style.fill: palegreen
    
    ncclCommEnsureReady.style.stroke: red
    ncclCommEnsureReady.style.fill: mistyrose
}

# misc/
misc: {
    near: top-center

    strongstream\.cc: {
        ncclCudaGetCapturingGraph
    }
    utils\.cc: {
        ncclMemoryStack\:\:allocateSpilled.style.stroke: red
        ncclMemoryStack\:\:allocateSpilled.style.fill: mistyrose
    }
    argcheck\.cc: {
        CommCheck.style.stroke: gray
        CommCheck.style.fill: gainsboro

        ArgsCheck.style.stroke: gray
        ArgsCheck.style.fill: gainsboro
    }
    argcheck\.cc.style.stroke: gray
    argcheck\.cc.style.fill: gainsboro
}
